service: reports-ecs

frameworkVersion: "3"

provider:
  name: aws
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.deploymentBucketName}
  deploymentPrefix: ${self:custom.basename}

custom:
  basename: ${self:service}-${self:provider.stage}
  deploymentBucketName: eric-experiments-k9xjhbjk3r4s

resources:
  Resources:
    ReportsEcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        CapacityProviders:
          - FARGATE
        ClusterName: reports-cluster
        ClusterSettings:
          - Name: containerInsights
            Value: enabled
        # Configuration: ClusterConfiguration
        DefaultCapacityProviderStrategy:
          - Base: 1
            CapacityProvider: "FARGATE"
            Weight: 1
        # ServiceConnectDefaults: ServiceConnectDefaults
        Tags:
          - Key: "reports-cluster"
            Value: "reports-cluster"

    ReportsEcsTask:
      Type: AWS::ECS::TaskDefinition
      Properties:
        ContainerDefinitions:
          - #
            # We could use this `Command` as a replacement for `CMD [ "node", "dist/index.js" ]` in the Dockerfile
            Command:
              - "node"
              - "dist/index.js"
            # We can use `Environment` to specify ENV vars
            # Might need this for credentials or perhaps `Secrets` below
            # Environment:
            #   - KeyValuePair
            # Secrets:
            #   - Secret
            Image: "${param:reportsRegistryUri}:latest"
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-group: "reports-ecs-task"
                awslogs-region: "us-east-1"
                awslogs-create-group: "true"
                awslogs-stream-prefix: "reports-ecs"
              # SecretOptions:
              #   - Secret
            # Cpu: Integer
            # Memory: Integer
            # MemoryReservation: Integer
            Name: "reports-container"
            ReadonlyRootFilesystem: true
            # TBD if this is needed
            # RepositoryCredentials: RepositoryCredentials
            # StartTimeout: Integer
            # StopTimeout: Integer
            # Unknown if working directory is needed or not given that it's specified in the Dockerfile
            WorkingDirectory: "/usr/src/app"
        Cpu: "512"
        Memory: "1024"
        # EphemeralStorage: EphemeralStorage
        ExecutionRoleArn: ${param:reportsTaskRoleArn}
        Family: "reports"
        NetworkMode: "awsvpc"
        RequiresCompatibilities:
          - "FARGATE"
        RuntimePlatform:
          CpuArchitecture: "ARM64"
          OperatingSystemFamily: "LINUX"
        # Tags:
        #   - Tag
        TaskRoleArn: ${param:reportsTaskRoleArn}

    # I don't think we need the service for scheduled tasks
    # This seems to only be a thing for long running tasks
    # TBD
    # ReportsEcsService:
    #   Type: AWS::ECS::Service
    #   Properties:
    #     Cluster: !GetAtt ReportsEcsCluster.Arn
    #     DesiredCount: 1
    #     # We might need `EnableExecuteCommand` if we replace the `CMD` line in the Dockerfile
    #     # EnableExecuteCommand: Boolean
    #     LaunchType: "FARGATE"
    #     # We might need `NetworkConfiguration` for VPC stuff
    #     # NetworkConfiguration: NetworkConfiguration
    #     PlatformVersion: "LATEST"
    #     PropagateTags: "TASK_DEFINITION"
    #     # Role: String
    #     SchedulingStrategy: "REPLICA"
    #     # ServiceConnectConfiguration: ServiceConnectConfiguration
    #     ServiceName: "reports-task-ecs-service"
    #     # ServiceRegistries:
    #     #   - ServiceRegistry
    #     # Tags:
    #     #   - Tag
    #     TaskDefinition: !GetAtt ReportsEcsTask.Arn

  Outputs:
    reportsClusterArn:
      Value: !GetAtt ReportsEcsCluster.Arn
    reportsTaskArn:
      Value: !Ref ReportsEcsTask
